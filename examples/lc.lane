enum Expr {
    lit (val : Int),
    id (var : String),
    lam (arg : String) (body : Expr),
    app (operator : Expr) (operand : Expr)
}

enum Env {
    empty, 
    extend (name : String) (val : Val) (origin : Env)
}

enum Val {
    intVal (i : Int), 
    lamVal (arg : String) (body : Expr) (env : Env)
}

enum Option A {
    some (val : A),
    none 
}

def lookup (id : String) (env : Env) : Option Val = match env {
    empty => none [Val],
    extend i v e => if eq i id then some [Val] v else lookup id e 
}

def eval (e : Expr) (env : Env) : Option Val = match e {
    lit n => some [Val] (intVal n), 
    id i => lookup i env,
    lam arg body => some [Val] (lamVal arg body env),
    app operator operand => 
        match eval operator env {
            some e => match e {
                lamVal arg body env1 => 
                    match eval operand env {
                        some v => eval body (extend arg v env1),
                        none => none [Val]
                    }
                , 
                intVal n => none [Val]
            }, 
            none => none [Val]
        }
}

def example : Expr = app (app (lam "x" (lam "y" (app (id "x") (id "y")))) (lam "x" (id "x"))) (lit 10)

def main : Int = match eval example empty {
    some v => match v {
        intVal n => n, 
        _ => 0
    }, 
    _ => 0
}
